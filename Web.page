mark pilgrim: google's html5 evangelist

encodings:

- url encoding: `user%40domain.com`, `hello%20world`
- html encoding: `1 &lt; 2`
- javascript escaping: eg for json
- css escaping

flash RTFMP

- udp only (RTMP is the tcp-based one)
- can make p2p connections using RTFMP server (eg adobe stratus) as rendezvous
- server maintains list of potential peers that can be connected to
  - server assigns temp uniq IDs to connections from SWFs
  - other SWFs connected to server can subscribe to streams and events from
    that ID once the bcasting SWF agrees to the connection
  - if NetConnection to server is lost/closed, any peer connection is also
    closed
- server also assists in nat-t; supports TURN
- in flash 10; see NetConection, NetStream objects
- security
  - privacy: 128-bit AES encryption; key negotiated with D-H
  - auth: none, but provides secure nonces to aid with app-level auth
  - only enables sending media from mic/cam to other flash player endpoints
    that subscribe to media streams

misc

- `rel=nofollow`: indicates to search engine that a link should not influence
  the target's ranking

techniques

- css spriting: combining multiple images into one (reducing requests) and
  cutting pieces out using css

browser plugins

- plugins like flash can be windowed for perf, or windowless (opaque or transparent)
- z-ordering
  - certain browser elements like native widgets or iframes are traditionally also windowed
  - windowed elements are all drawn on top of other elements
  - de-facto standard practice: use iframes to pos things atop other windows
- harder to smoothly (synchronously) scroll windowed plugins
- must desynchronize for responsiveness, but windowless
gtk, moz moving to eliminate widgets in own native windows

x drawables TODO

xt: ancient toolkit for windowed plugins

3 old techniques for dynamically typed languages on language vm's
- all objects in lang subclass a common root object; lots of cons
- reflection: may be mismatch for lang type concepts
- interpreter: slow
invokedynamic
- opcode identifies method name & type (which can be very generic, e.g. (Object;Object)Object)
- a bootstrap method is registered with a class
- first time you encounter a particular invokedynamic in some class C's method, call C's bootstrap method
- bootstrap method is passed the calling class C, method name, method type
- return a CallSite whose target has been set to some MethodHandle (a pointer to a method)
- for some reason, the CallSite ctor takes the same args as the bootstrap method; not sure how this is used
- as side effect, the CallSite may be stored away in a data structure managed by the lang runtime, so that it can be retargeted in the future
