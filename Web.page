mark pilgrim: google's html5 evangelist

encodings:

- url encoding: `user%40domain.com`, `hello%20world`
- html encoding: `1 &lt; 2`
- javascript escaping: eg for json
- css escaping

flash RTFMP

- udp only (RTMP is the tcp-based one)
- can make p2p connections using RTFMP server (eg adobe stratus) as rendezvous
- server maintains list of potential peers that can be connected to
  - server assigns temp uniq IDs to connections from SWFs
  - other SWFs connected to server can subscribe to streams and events from
    that ID once the bcasting SWF agrees to the connection
  - if NetConnection to server is lost/closed, any peer connection is also
    closed
- server also assists in nat-t; supports TURN
- in flash 10; see NetConection, NetStream objects
- security
  - privacy: 128-bit AES encryption; key negotiated with D-H
  - auth: none, but provides secure nonces to aid with app-level auth
  - only enables sending media from mic/cam to other flash player endpoints
    that subscribe to media streams

misc

- `rel=nofollow`: indicates to search engine that a link should not influence
  the target's ranking

techniques

- css spriting: combining multiple images into one (reducing requests) and
  cutting pieces out using css

browser plugins

- plugins like flash can be windowed for perf, or windowless (opaque or transparent)
- z-ordering
  - certain browser elements like native widgets or iframes are traditionally also windowed
  - windowed elements are all drawn on top of other elements
  - de-facto standard practice: use iframes to pos things atop other windows
- harder to smoothly (synchronously) scroll windowed plugins
- must desynchronize for responsiveness, but windowless
gtk, moz moving to eliminate widgets in own native windows

x drawables TODO

xt: ancient toolkit for windowed plugins

3 old techniques for dynamically typed languages on language vm's
- all objects in lang subclass a common root object; lots of cons
- reflection: may be mismatch for lang type concepts
- interpreter: slow
invokedynamic
- opcode identifies method name & type (which can be very generic, e.g. (Object;Object)Object)
- a bootstrap method is registered with a class
- first time you encounter a particular invokedynamic in some class C's method, call C's bootstrap method
- bootstrap method is passed the calling class C, method name, method type
- return a CallSite whose target has been set to some MethodHandle (a pointer to a method)
- for some reason, the CallSite ctor takes the same args as the bootstrap method; not sure how this is used
- as side effect, the CallSite may be stored away in a data structure managed by the lang runtime, so that it can be retargeted in the future

Google SPDY (Alyssa (Rzeszutek) Wilk, talk at MIT 12/8/2009)

- HTTP protocol built on TCP; former internal name "FLIP"
- features
  - basic
    - multiplexed streams: done by packetizing/framing (has SYN, DATA, FIN
      pkts)
    - prioritization: advisory, per-req; can reduce load times by eg loading js
      first that processes while other resources are loading
      - determined entirely by browser
    - header compression: gzip dicts are kept across reqs
  - advanced (optional
    - server push: avoid half the round trip of having client send a req
    - hints: client *may* request this soon, but don't xmit yet
- status
  - protocol still being developed
  - will be opt-in in chrome; built in-memory server
  - will do out-of-lab experiments, deploying across google services
- performance
  - 40% fewer packets than compressed HTTP, 15% fewer bytes
  - 88% header compression, 85% resp hdr compression
  - saved 45-1142ms per page load
- real world pkt loss is ~1%; SPDY is 41-47% faster for PL btwn 1-2% because
  (1) fewer packets and (2) prioritization
- SSL: a bunch of remaining work/issues; want to negotiate SPDY as part of SSL
  handshake
- future work
  - caching implications: what are latency implications of not using proxy
    caches, etc? (can't proxy bc not enough support for SPDY)
  - unidirectional streams: replace bidir streams + half-close
  - flow control: backoff + GOAWAY; if server overloaded, tell client "slow
    down" or lose benefits
  - insecure content: classify data as public + cacheable?
- related work
  - HTTP over SCTP
  - SST

social standards TODO

- types
  - identity/SSO: manage a single centralized identity; need only sign on once
- windows live ID aka ms passport aka ms wallet: identity/SSO; an openid
  provider
- openauth: identity/SSO; access authorization
  - by AOL; auth AOL/AIM users
- openid: identity/SSO
  - use case
    - when user registers for a service, he provides his openid URL
    - service makes request to openid provider through browser
    - taken to openid provider's page asking user to confirm request
  - attribute exchange: eg profile pic, location, other fields
- oauth: lets user authorize a requestor to access API
  - whenever 
  - tokens grant access to specific resources for time duration
  - twitter's default auth
- facebook connect
  - lets sites use fb login, get acct info, get social graph, publish feed
    stories
  - overlaps with openid, openid attribute exchange, portable contacts
- opensocial: from myspace, google/orkut; based on google gadgets
  - uses 
  - user and social graph
  - defines common API for social apps across multiple websites
- google friend connect: something about AJAX widgets

latency costs

- amazon: every 100ms latency cost 1% in sales <http://home.blarg.net/~glinden/StanfordDataMining.2006-11-29.ppt>
- google: adding .5s lost 20% traffic <http://glinden.blogspot.com/2006/11/marissa-mayer-at-web-20.html>
- brokers could lose $4M revenue/ms if etrading platform 5ms behind competition <http://www.tabbgroup.com/PublicationDetail.aspx?PublicationID=346>
- <http://highscalability.com/blog/2009/7/25/latency-is-everywhere-and-it-costs-you-sales-how-to-crush-it.html>
