- bitblt: perform boolean operation on same-sized rectangles in two images
  (src, dst)
- Bresenham's algorithm: line-drawing

Software

- NVIDIA Cg: high-level shading language (HLSL)
- NVIDIA CUDA: GPGPU PL
- OpenGL: graphics library
- GLU: OpenGL Utility Library
- GLUT: OpenGL Utility Toolkit; unmaintained, restrictive license
- freeglut: OSS clone of the original GLUT
- openglut: fork of freeglut that adds some more functionality
- GLUI: OpenGL User Interface Library

windows graphics APIs

- user32.dll does all window/menu/etc. drawing on top of GDI
- Graphics Device Interface (GDI): old Windows API for drawing lines/curves,
  rendering fonts, handling palettes
  - can't animate: no synchronizing framebuffers
  - can't rasterize for 3D
  - no direct app-HW access but higher abstraction; easy to draw on multiple
    devices
  - GDI+: C++-based; anti-aliasing; FP coords; gradient shading; more complex
    path mgmt; intrinsic file format (jgp/gif) support; affine xforms of 2D
    view pipeline
- desktop window manager (DWM): compositing engine added in vista
  - runs on D3D
  - runs GDI, GDI+; GDI no longer HW-accel'd; GDI now software-rendered legacy
- Direct3D: basically the GPU API ("immediate mode graphics API")
  - fills in holes that HW is missing with software
- Direct2D: added in Win7; to render geometries, bmps, text directly atop D3D
  - also: remote rendering over RDP; SW fallback for server-side rendering/lack
    of HW; cleartype
- DirectWrite: complements D2D; HW-accel'd text; text layout/rendering;
  typography
- handle can be passed to various GDI functions

Graphics architecture (Angstrom group meeting, jrk@mit.edu, 4/24/08)

- raytracing vs rasterization
  - rasterization is best suit for doing primary visibility (calculating what's
    visible)
  - raytracing good for calculating scene lighting?
- IO bandwidth: 50% texture input, 50% read-modify-write framebuffer,
  negligible scene input
- arbitrarily large amt of computation: color on each pixel, anti-aliasing
- most money in game production goes into art
  - artists mostly work with photos and Photoshop
  - cost doubles every 2-3 years
  - much more expensive than hardware
  - no/very little procedural content generation
  - programmers more expensive than artists, and more effort to produce
    content-generating algos
  - exceptions: Spore
- graphics pipelines: how long are they?
  - "Graphics Pipeline": directx and what points where you get to insert your
    functions and what are fixed
  - easily come up with 100 pipeline stages for parallelism
- (geometry, textures) -> many vertex -> 1 rasterization -> many fragmentation
  -> some framebuffer
- general-purpose data-parallel cores for graphics (Intel's architecture) is the future
- locality easy to achieve
- NVIDIA CUDA lets you program more generally for GPUs
  - used to bend over backwards by reducing problem to triangles and quads
  - similar to Cell
  - DX11 has general-purposes shader
- Cell is painful
- abstract model: asynchronous dataflow with kernels and queues
- paper on same stuff from Sequoia folks
